var amqp = require('amqplib');
//npm package to manage airplanes
var Plane = require('planes-generator');
//npm package to manage IFTTT invocation
var IFTTT = require('ifttt-webhooks-channel');
const ifttt = new IFTTT('nAmIL7W45OeEbYrF8O0LytYaup7YdU5REgRnKYtNdUp');

var mqtt = require('mqtt'), url = require('url');
var mqtt_url = url.parse(process.env.CLOUDAMQP_MQTT_URL || 'mqtt://guest:guest@192.168.1.7:1883');
var auth = (mqtt_url.auth || ':').split(':');
var url = "mqtt://" + mqtt_url.host;

var options = {
    port: mqtt_url.port,
    clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),
    username: auth[0],
    password: auth[1],
};

//This function sends messages to the generalLogger on the topic logs/arrivals
function send_feedbackOnGeneral(msg) {
    var q = 'logs/arrivals';
    amqp.connect('amqp://guest:guest@192.168.1.7:5672').then(function(conn) {
        return conn.createChannel().then(function(ch) {
            var ok = ch.assertQueue(q, {durable: false});
            return ok.then(function(_qok) {
                ch.sendToQueue(q, Buffer.from(msg));
                console.log(" [x] Sent '%s", msg);
                return ch.close();
            });
        }).finally(function() {
            conn.close();
        });
    }).catch(console.warn);
}

// This function takes care of managing the events generated by planeProducer
exports.handler = function(context, event) {
    var _event = JSON.parse(JSON.stringify(event));
    // recreate the plane received as event
    var currentPlane = new Plane(_event.body.data);

    context.callback("feedback");

    // It sends the currentPlane information to the general logger,
    // it is the current plane that is approaching to airport
    send_feedbackOnGeneral("INCOMING -----> " + currentPlane.model + " " + currentPlane.name + " " + currentPlane.fuelLevel + " " + currentPlane.tag);

    // if the currentPlane is landed..
    if (currentPlane.tag == '_LANDED_') {
        var date = new Date();        

        // invoke the webhook
        ifttt.post('plane_landed', [currentPlane.model + " - " + currentPlane.name,
                                     date.getDate() + "/" + (date.getMonth()+1) + "/" + date.getFullYear(),
                                      (date.getHours()+1) + ":" + date.getMinutes()]);

        var client = mqtt.connect(url, options);   
    
        // forward the current plane informations on the others mqtt topics
        client.on('connect', function() {
            client.publish('iot/planes/arrivals/fuel', currentPlane.toString(), function() {
                context.callback('MQTT Message sent to fuel addicts');
            });

            client.publish('iot/planes/arrivals/tires', currentPlane.toString(), function() {
                context.callback('MQTT Message sent to tires addicts');
            });

            client.publish('iot/planes/arrivals/issues', currentPlane.toString(), function() {
                context.callback('MQTT Message sent to general addicts');
            });

            client.end();
        });
    }
}